<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 准备工作导入aop(约束)命名空间 -->
	<!-- 1.配置目标对象 -->
	 <bean name="userService" class="com.m.service.UserServiceImpl"></bean>
	<!-- 2.配置通知类对象 -->
	 <bean name="myAdvice" class="com.m.a_springaop.MyAdvice"></bean>
	<!-- 3.配置将通知织入目标对象 -->
	<aop:config>
		<!-- 
			配置切入点
			配置需要增强的方法
			execution 修饰public 返回void 复制接口中需要增强方法的方法名字 
			execution(public void com.m.service.UserServiceImpl.save())
			execution(void com.m.service.UserServiceImpl.save())	-可以不写public默认就是public
			execution(* com.m.service.UserServiceImpl.save())		-可以不写返回值，*表示接收所有返回值类型
			execution(* com.m.service.UserServiceImpl.*)			-可以不写方法名，*全类名下的所有方法
			execution(* com.m.service.UserServiceImpl.*)			-可以不写方法名，*全类名下的所有方法(必须是空参的方法)
			execution(* com.m.service.UserServiceImpl.*(..))		-可以在方法后加上(..)，表示可以接收所有参数
			execution(* com.m.service.*ServiceImpl.*(..))			-找com.m.service包下面，以ServiceImpl结尾的所有类
			execution(* com.m.service..*ServiceImpl.*(..))			-找com.m.service包下面，包括子包，以ServiceImpl结尾的所有类(一般不用)
		 -->
		<aop:pointcut expression="execution(* com.m.service.*ServiceImpl.*(..))" id="pc"/>
		<!-- 配置类名 -->
		<aop:aspect ref="myAdvice">
			<!-- 指定 before 作为前置通知方法 -->
			<aop:before method="before" pointcut-ref="pc"/>
			<!-- 指定 afterReturning 作为后置通知方法(异常不执行) -->
			<aop:after-returning method="afterReturning" pointcut-ref="pc"/>
			<!-- 指定 around 作为环绕通知 -->
			<aop:around method="around" pointcut-ref="pc"/>
			<!-- 指定 afterException 作为异常拦截通知 -->
			<aop:after-throwing method="afterException" pointcut-ref="pc"/>
			<!-- 指定 after 作为后置通知(异常也执行) -->
			<aop:after method="after" pointcut-ref="pc"/>
		</aop:aspect>
	</aop:config>
</beans>